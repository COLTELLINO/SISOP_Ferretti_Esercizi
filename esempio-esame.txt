Esercizio 1:

SemA = 0;
SemB = 0;
SemC = 0;

Process A {
  while (true) {
    print(“Ado”);
    V(SemB);
    P(SemA);
    print(“Sistem”);
    V(SemC);
    P(SemA);
    print(“Oper”);
    V(SemB);
    P(SemA);
  }
}	

Process B {
 while (true) {
    P(SemB);
    print(“ro ”);
    V(SemC);
    P(SemB);
    print(“ativi!!\n”);
    V(SemA);
   }
}

Process C {
  while (true) {
    P(SemC);
    print(“i ”);
    V(SemA);
  }
}

Esercizio 2:
L’algoritmo SJF(Shortest Job First) consiste nello scegliere l’ordine con cui eseguire i processi in base alla durata del loro CPU-burst, ci sono 2 tipi di algoritmi SJF: 
-Preemptive quando all’arrivo di un processo nuovo più corto del processo corrente, lo scheduler ferma il processo corrente e lo sostituisce a quello nuovo;
-Non preemptive quando questa cosa non è possibile. L’algoritmo SJF ha la possibilità di essere soggetto a starvation:
se ci sono molti processi molto lunghi l’ultimo processo aspetterebbe molto tempo però prima o poi verrà eseguito (in questo caso non c’è starvation),
se invece nella versione non preemptive vengono aggiunti di continuo un’infinità di nuovi processi più corti di quelli già presenti, allora i processi più lunghi non verranno mai eseguiti, portandoli ad essere soggetti di starvation.

Esercizio 3:
Una system call è un’interfaccia che permette ai programmi e all’utente di interagire con il sistema operativo, eseguendo operazioni privilegiate che il programma non potrebbe eseguire, come la gestione di risorse, dei file e dei processi.

Esercizio 4:
La tabella dei file aperti di un processo è privata per ogni processo e contiene solo i file che quel processo ha aperto, con relativo file descriptor (FD) e un puntatore alla voce corrispondente nella tabella dei file aperti di sistema, che è unica per l'intero sistema operativo. Contiene una voce per ogni file attualmente aperto nel sistema, all’apertura di un file se il file è già aperto, viene incrementato il contatore dei riferimenti nella tabella di sistema, se il file non è aperto, viene creata una nuova voce nella Tabella dei file aperti di sistema.

Esercizio 5:
-> S1 -> F2 -> S0 -> F1 ->
F1 richiede S1 che è allocata a F2, che richiede a sua volta S0, allocata a F1, quindi entrambi rimarranno in attesa all'infinito senza posare le spade, visto che nessuno dei due troverà la seconda spada disponibile.

Esercizio 6:
No, non è possibile, perché: Il binding degli indirizzi è il momento in cui gli indirizzi simbolici delle variabili e delle istruzioni vengono tradotti in indirizzi fisici. Se questo avviene durante la compilazione, significa che: Il codice compilato contiene indirizzi di memoria assoluti, cioè già assegnati a posizioni specifiche della RAM. Quando il programma viene caricato in memoria, deve essere eseguito esattamente in quegli indirizzi. Non è possibile caricare più istanze del processo contemporaneamente, perché avrebbero tutti gli stessi indirizzi fisici, portando a conflitti nella memoria.
